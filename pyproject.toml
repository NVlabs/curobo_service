# Copyright (c) 2024, NVIDIA CORPORATION & AFFILIATES. All rights reserved.
#
# NVIDIA CORPORATION, its affiliates and licensors retain all intellectual
# property and proprietary rights in and to this material, related
# documentation and any modifications thereto. Any use, reproduction,
# disclosure or distribution of this material and related documentation
# without an express license agreement from NVIDIA CORPORATION or
# its affiliates is strictly prohibited.
#
# Template version: v1.11.0
[build-system]
requires = ["setuptools>=61", "setuptools-scm>=8.0.0"]
build-backend = "setuptools.build_meta"

[project]
name = "nvidia-srl-curobo-service"
authors = [
	{name = "NVIDIA Seattle Robotics Lab"},
]
description = "<brief project description>"
keywords = ["docker"]
classifiers = [
  "Operating System :: OS Independent",
  "Intended Audience :: Developers",
  "Natural Language :: English",
  "Programming Language :: Python :: 3",
  "Framework :: Robot Framework :: Library",
]
dynamic = ["version", "readme"]
license = {file = "LICENSE"}
requires-python = ">=3.10"

# NOTE (roflaherty): For ROS projects, dependencies need to be listed in the `requirements.txt` file for each ros package.
dependencies = [
  "setuptools-scm>=8.0.0",
  "fastapi[standard]",
  "torch==2.4.0",
  "requests",
  "uvicorn",
  "numpy",
  "nvidia-srl-base",
]

[project.optional-dependencies]
ci = [
  # Linting
  # -------
  "black==22.6.0",
  "flake8==7.0.0",
  "flake8-copyright==0.2.4",
  "flake8-docstrings==1.7.0",
  "flake8-isort==6.1.1",
  "flake8-rst-docstrings==0.3.0",
  "flake8-pyproject==1.2.3",
  "mypy==1.7.0",
  "pep8-naming==0.13.2",

  # Typing
  "types-PyYAML",
  "types-requests",

  # Testing
  # -------
  "pytest==6.2.5",
  "pytest-cov==3.0.0",

  # Documentation generating
  # ------------------------
  "docutils==0.20.1",
  "graphviz==0.19.1",
  "sphinx==7.2.6",
  "sphinx-rtd-theme==2.0.0",
  "sphinx-copybutton==0.5.2",

  # Packaging
  # ---------
  "build==1.0.3",
  "twine==3.7.1",

  # Other
  # -----
  "anybadge==1.8.0",

  # Jupyter linting
  # ---------------
  # "black[jupyter]==22.6.0",
  # "ipykernel==6.26.0",
  # "nbclient==0.7.4",
  # "nbconvert==7.9.2",
  # "nbformat==5.9.2",
  # "nvidia-srl-jupyter-clear-output==0.4.0",
]

dev = [
  # Debug
  # -----
  "ipdb",
  "ipython",

  # Docker
  # ------
  "nvidia-srl-dock",

  # Jupyter
  # -------
  # "ipykernel",
  # "jupyter",
]

[project.scripts]
# Add here CLI scripts here:

[tool.setuptools]
platforms = ["any"]

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.dynamic]
readme = {file = ["README.md"], content-type = "text/markdown"}

# See the `setuptools_scm` documentation for the description of the schemes used below.
# https://pypi.org/project/setuptools-scm/
# NOTE: If these values are updated, they need to be also updated in `srl/__init__.py`.
# NOTE: The `fallback_version` is necessary to prevent an error when attempting to install the
# project locally and the project is not in a valid git repo or when git is not installed or
# functioning correctly.
[tool.setuptools_scm]
version_scheme = "no-guess-dev"
local_scheme = "dirty-tag"
fallback_version = "0.0.0.dev0"

[tool.black]
line-length = 100
extend-exclude = "deprecated/"
preview = true

[tool.flake8]
max-line-length = 100
select = ["E", "F", "W", "C" , "D", "I", "N", "RST"]
exclude = [".git", "build", "deprecated", "dist", "venv", "wip"]
ignore = [
  "D105", # (don't require docstrings for magic methods)
  "E203", # (to be Black compatible)
  "E731", # (ignore recommendation to not use lambdas because there is no other way to write a single line function with out warnings)
  "RST201", "RST203", "RST301", # (to be Google Python style compatible, see: https://github.com/peterjc/flake8-rst-docstrings/issues/17)
  "W503", # (this is deprecated, see: https://lintlyci.github.io/Flake8Rules/rules/W503.html)
]
per-file-ignores = [
  "tests/*_test.py:D103",
]
docstring-convention = "google"
rst-roles = [
  "attr",
  "class",
  "func",
  "meth",
  "mod",
  "obj",
  "ref",
  "term",
]
rst-directives = [
  "autosummary",
  "data",
  "currentmodule",
  "deprecated",
  "envvar",
  "exception",
  "glossary",
  "moduleauthor",
  "plot",
  "testcode",
  "versionadded",
  "versionchanged",
]
rst-substitutions = [
  "version",
]
# Needed to prevent false N804 and N805 errors when using the `abc` module
# See: https://github.com/pycqa/pep8-naming#options
classmethod-decorators = ["classmethod", "abstractclassmethod"]
staticmethod-decorators = ["staticmethod", "abstractstaticmethod"]
copyright-check = true
# See the following page about NVIDIA's copyright header
# https://confluence.nvidia.com/pages/viewpage.action?pageId=788418816
copyright-regexp = "Copyright \\(c\\) 20\\d{2}(?:-20\\d{2})?, NVIDIA CORPORATION & AFFILIATES. All rights reserved.\n\\#\n\\# NVIDIA CORPORATION\\, its affiliates and licensors retain all intellectual\n\\# property and proprietary rights in and to this material, related\n\\# documentation and any modifications thereto. Any use, reproduction,\n\\# disclosure or distribution of this material and related documentation\n\\# without an express license agreement from NVIDIA CORPORATION or\n\\# its affiliates is strictly prohibited.\n[^\\s]"

[tool.isort]
# Multi line output mode 3 is used to conform with Black. See
# https://github.com/PyCQA/isort#multi-line-output-modes
multi_line_output = 3
profile = "black"
import_heading_stdlib = "Standard Library"
import_heading_thirdparty = "Third Party"
import_heading_firstparty = "NVIDIA"
known_first_party = ["nvidia"]
import_heading_localfolder = "Local Folder"
line_length = 100
skip_glob = ["deprecated/*", "wip/*"]

[tool.pytest.ini_options]
norecursedirs = [".git", ".venv", "deprecated", "dist", "wip"]
python_files = ["*_test.py"]

[tool.coverage.report]
# NOTE: Single-quoted strings are required in TOML for regular expressions
exclude_lines = [
	"pragma: no cover", # Need to re-enable the standard no cover match
	'^\s*pass\s*$',  # Skip any pass lines
]

[tool.mypy]
disallow_untyped_defs = true
no_implicit_optional = true
show_error_codes = true
warn_unused_ignores = true
exclude = [
	"build",
	"deprecated",
	"dist",
	"docs",
	"venv",
	"wip",
]

[[tool.mypy.overrides]]
module = [
	"importlib.metadata",
	"setuptools",
	"setuptools_scm",
	"nvidia",
	"nvidia.srl",
	"nvidia.srl.curobo_service",
	"nvidia.srl._curobo_service",
	"._curobo_service",
]
ignore_missing_imports = true
